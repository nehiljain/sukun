"""
Django settings for releases project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

import environ
from dotenv import load_dotenv

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent

# Initialize environment variables
env = environ.Env(DEBUG=(bool, True))

ENVIRONMENT = os.environ.get("ENVIRONMENT", "dev")
# Read environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))
print(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-9#x#x289_n8$&3*q2u1pyu690rg^1!-9lpsu^j!8zgk-2*2u%("  # pragma: allowlist secret

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")
print("DEBUG is set to ", DEBUG)
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(",")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_spectacular",
    "corsheaders",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.github",
    "oauth2_provider",
    "user_org",
    "common",
    "jsoneditor",
    "django_seed",
    "video_gen",
    "django_celery_results",
    "task_api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.gzip.GZipMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "common.middleware.ConditionalCsrfMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

print("APP_DATABASE_URL", os.environ.get("APP_DATABASE_URL"))

DATABASES = {"default": env.db("APP_DATABASE_URL", default="sqlite:///db.sqlite3")}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "static")

if not DEBUG:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"
STATICFILES_DIRS = [
    os.path.join(os.path.dirname(BASE_DIR), "static"),  # Vite builds to ../static
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOWED_ORIGINS = os.environ.get(
    "CORS_ALLOWED_ORIGINS", "http://localhost:8000"
).split(",")

CSRF_TRUSTED_ORIGINS = os.environ.get(
    "CSRF_TRUSTED_ORIGINS", "http://localhost:8000"
).split(",")

AUTHENTICATION_BACKENDS = ("allauth.account.auth_backends.AuthenticationBackend",)

REST_USE_JWT = True  # Use JWT for authentication with dj-rest-auth
SITE_ID = 1  # Set site ID

SITE_ID = 1  # Set the site ID

# Disable email verification for simplicity
ACCOUNT_EMAIL_VERIFICATION = "none"
LOGIN_REDIRECT_URL = "/"  # Redirect URL after successful login
LOGOUT_REDIRECT_URL = "/"  # Redirect URL after logout


REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(asctime)s %(processName)s %(process)d %(thread)d %(levelname)s %(module)s %(message)s"
        },
        "normal": {
            "format": "%(asctime)s <%(process)d> %(levelname)s [%(name)s] %(message)s"
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": [],
            "class": "logging.StreamHandler",
            "formatter": "normal",
        },
    },
    "loggers": {
        "": {
            "level": "INFO",
            "handlers": ["console"],
        },
        "django": {
            "level": "INFO",
            "handlers": ["console"],
            "propagate": False,
        },
        "moso": {
            "level": "DEBUG",
            "handlers": ["console"],
            "propagate": False,
        },
    },
}

LOGIN_URL = "/"

JSON_EDITOR_JS = "https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/8.6.4/jsoneditor.js"
JSON_EDITOR_CSS = (
    "https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/8.6.4/jsoneditor.css"
)

STORAGE_BACKEND = os.environ.get("STORAGE_BACKEND", "S3")

# GCS Settings
GCS_BUCKET_NAME = os.environ.get("GCS_BUCKET_NAME")
GCS_CREDENTIALS_PATH = os.environ.get("GCS_CREDENTIALS_PATH")

# S3 settings
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
AWS_STORAGE_PRIVATE_BUCKET_NAME = os.environ.get("AWS_STORAGE_PRIVATE_BUCKET_NAME")
AWS_REGION = os.environ.get("AWS_REGION", "us-west-1")

BACKUP_DIR = os.path.join(BASE_DIR, "failed_uploads")

# Create backup directory if it doesn't exist
os.makedirs(BACKUP_DIR, exist_ok=True)

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
SITE_URL = os.environ.get("SITE_URL", "http://app.demodrive.tech")

SPECTACULAR_SETTINGS = {
    "TITLE": "DemoDrive API",
    "DESCRIPTION": "DemoDrive API",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    # OTHER SETTINGS
}

EXPOSE_BROWSABLE_API = env("EXPOSE_BROWSABLE_API", default=False)

# Add these settings
CDN_BASE_URL = os.environ.get("CDN_BASE_URL")
FALLBACK_BASE_URL = os.environ.get("FALLBACK_BASE_URL")


CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND", "django-db")
CELERY_CACHE_BACKEND = "django-cache"
CELERY_RESULT_EXTENDED = True

# Configure broker based on environment
if os.environ.get("BROKER_TYPE") == "sqs":
    # Simple approach: just use sqs:// and let Celery use AWS_ACCESS_KEY_ID and
    # AWS_SECRET_ACCESS_KEY environment variables automatically
    CELERY_BROKER_URL = "sqs://"

    # SQS specific settings
    CELERY_BROKER_TRANSPORT_OPTIONS = {
        "region": os.environ.get("AWS_REGION", "us-west-1"),
        "visibility_timeout": 10800,  # 3 hours - important for long-running tasks
        "polling_interval": 1,  # How often to check for new messages (seconds)
        "wait_time_seconds": 10,  # Long polling (0-20 seconds)
        "queue_name_prefix": "",  # Add a prefix to queue names if needed
    }

    # Default queue name
    CELERY_TASK_DEFAULT_QUEUE = os.environ.get("SQS_QUEUE_NAME", "render-jobs-dev")
else:
    # Default to Redis for development
    CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://redis:6379/0")

CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TIMEZONE = "UTC"
CELERY_ENABLE_UTC = True

# Celery task-specific settings
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_TIME_LIMIT = 10800  # 3 hours timeout for render tasks
CELERY_TASK_SOFT_TIME_LIMIT = 10800  # 3 hours soft timeout

LOCAL_PROCESSING = env("LOCAL_PROCESSING", default=False)
ADMIN_EMAILS = env("ADMIN_EMAILS", default="")
ENABLE_SIGNALING = env("ENABLE_SIGNALING", default=True)
ASSEMBLYAI_API_KEY = env("ASSEMBLYAI_API_KEY", default="")
DAILY_API_KEY = env("DAILY_API_KEY", default="")
